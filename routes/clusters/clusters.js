// Generated by CoffeeScript 1.3.3
(function() {
  var auth, client, keys, redis;

  redis = require("redis");

  keys = require("./keys");

  auth = require("../auth/auth");

  client = redis.createClient();

  client['Multi'] = client.multi();

  exports.create = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var data, errors, project;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("name").notEmpty();
      req.assert("status").notEmpty();
      req.assert("area").notEmpty();
      req.assert("description").notEmpty();
      req.assert("vendor").notEmpty();
      req.assert("initiation").isDate();
      req.assert("project").isInt();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid parameters",
          errors: errors
        }, 400);
        return;
      }
      project = req.body.project;
      data = {
        name: req.body.name,
        status: req.body.status,
        area: req.body.area,
        description: req.body.description,
        vendor: req.body.vendor,
        initiation: req.body.initiation
      };
      return client.INCR(keys.cluster_key(), function(error, id) {
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        return client.HMSET(keys.cluster_description(id), data, function(error) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          return client.SADD(keys.project_clusters(project), id, function(error) {
            if (error) {
              return res.json({
                message: "internal error"
              }, 500);
            } else {
              return res.json({
                message: "cluster created successful"
              }, 200);
            }
          });
        });
      });
    });
  };

  exports.show = function(req, res) {
    var cluster, errors;
    req.assert("cluster").isInt();
    errors = req.validationErrors();
    if (errors) {
      res.json({
        message: "invalid parameters",
        errors: errors
      }, 400);
      return;
    }
    cluster = req.params.cluster;
    return client.HGETALL(keys.cluster_description(cluster), function(error, description) {
      if (error) {
        res.json({
          message: "internal error"
        }, 500);
        return;
      }
      if (!description) {
        res.json({
          message: "cluster not found"
        }, 404);
      } else {
        return res.json(description, 200);
      }
      /*
      		client.SMEMBERS keys.components(data.cluster), (error, components) ->
      
      			cmds = []
      
      			for component in components
      				cmds.push(['HGETALL', keys.component(component)])
      
      			client.multi(cmds).exec (error, replies) ->
      				if error
      					res.json({ message: "internal error" }, 500)
      					return
      
      				res.json({ description: description, components: replies }, 200)
      */

    });
  };

}).call(this);
