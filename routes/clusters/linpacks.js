// Generated by CoffeeScript 1.3.3
(function() {
  var auth, client, keys, redis;

  redis = require("redis");

  keys = require("./keys");

  auth = require("../auth/auth");

  client = redis.createClient();

  exports.create = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var cluster, data, errors;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("title").notEmpty();
      req.assert("benchmark_date").isDate();
      req.assert("cores").isInt();
      req.assert("gpu_cores").isInt();
      req.assert("rmax").isFloat();
      req.assert("rpeak").isFloat();
      req.assert("nmax").isInt();
      req.assert("nhalf").isInt();
      req.assert("compiler_name").notEmpty();
      req.assert("compiler_options").notEmpty();
      req.assert("math_library").notEmpty();
      req.assert("mpi_library").notEmpty();
      req.assert("hpl_input").notEmpty();
      req.assert("hpl_output").notEmpty();
      req.assert("cluster").isInt();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid parameters",
          errors: errors
        }, 400);
        return;
      }
      cluster = req.body.cluster;
      data = {
        title: req.body.title,
        benchmark_date: req.body.benchmark_date,
        cores: req.body.cores,
        gpu_cores: req.body.gpu_cores,
        rmax: req.body.rmax,
        rpeak: req.body.rpeak,
        nmax: req.body.nmax,
        nhalf: req.body.nhalf,
        compiler_name: req.body.compiler_name,
        compiler_options: req.body.compiler_options,
        math_library: req.body.math_library,
        mpi_library: req.body.mpi_library,
        hpl_input: req.body.hpl_input,
        hpl_output: req.body.hpl_output
      };
      return client.INCR(keys.linpack_key, function(error, id) {
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        return client.HMSET(keys.linpack_description(id), data, function(error) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          return client.SET(keys.cluster_linpack(cluster), id, function(error) {
            if (error) {
              return res.json({
                message: "internal error"
              }, 500);
            } else {
              return res.json({
                message: "linpack created successful"
              }, 200);
            }
          });
        });
      });
    });
  };

  exports.show = function(req, res) {
    var errors, linpack;
    req.assert("linpack").isInt();
    errors = req.validationErrors();
    if (errors) {
      res.json({
        message: "invalid parameters",
        errors: errors
      }, 400);
      return;
    }
    linpack = req.params.linpack;
    return client.HGETALL(keys.linpack_description(linpack), function(error, data) {
      if (error) {
        res.json({
          message: "internal error"
        }, 500);
      }
      if (!data) {
        return res.json({
          message: "linpack not found"
        }, 404);
      } else {
        return res.json(data, 200);
      }
    });
  };

}).call(this);
