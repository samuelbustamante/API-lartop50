// Generated by CoffeeScript 1.3.3
(function() {
  var auth, client, keys, redis;

  redis = require("redis");

  keys = require("./keys");

  auth = require("../auth/auth");

  client = redis.createClient();

  exports.create = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var cluster, data, errors;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("cluster").notEmpty().isInt();
      req.assert("name").notEmpty();
      req.assert("model").notEmpty();
      req.assert("vendor").notEmpty();
      req.assert("nodes").notEmpty().isInt();
      req.assert("memory_node").notEmpty();
      req.assert("processor_name").notEmpty();
      req.assert("processor_model").notEmpty();
      req.assert("processor_socket").notEmpty();
      req.assert("processor_cores").notEmpty().isInt();
      req.assert("processor_speed").notEmpty();
      req.assert("accelerator_name").notEmpty();
      req.assert("accelerator_model").notEmpty();
      req.assert("accelerator_number").notEmpty();
      req.assert("accelerator_cores").notEmpty().isInt();
      req.assert("accelerator_speed").notEmpty();
      req.assert("primary_interconection").notEmpty();
      req.assert("primary_operating_system").notEmpty();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid parameters",
          errors: errors
        }, 400);
        return;
      }
      cluster = req.body.cluster;
      data = {
        name: req.body.name,
        model: req.body.model,
        vendor: req.body.vendor,
        nodes: req.body.nodes,
        memory_node: req.body.memory_node,
        processor_name: req.body.processor_name,
        processor_model: req.body.processor_model,
        processor_socket: req.body.processor_socket,
        processor_cores: req.body.processor_cores,
        processor_speed: req.body.processor_speed,
        accelerator_name: req.body.accelerator_name,
        accelerator_model: req.body.accelerator_model,
        accelerator_number: req.body.accelerator_number,
        accelerator_cores: req.body.accelerator_cores,
        accelerator_speed: req.body.accelerator_speed,
        primary_interconection: req.body.primary_interconection,
        primary_operating_system: req.body.primary_operating_system
      };
      return client.INCR(keys.component_key, function(error, id) {
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        return client.HMSET(keys.component(id), data, function(error) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          return client.SADD(keys.components(cluster), id, function(error) {
            if (error) {
              return res.json({
                message: "internal error"
              }, 500);
            } else {
              return res.json({
                message: "component created successful"
              }, 200);
            }
          });
        });
      });
    });
  };

  exports.show = function(req, res) {
    var data, options;
    options = [["component", "integer"]];
    data = validate.validate(options, req.params);
    if (!data) {
      res.json({
        message: "invalid params"
      }, 400);
      return;
    }
    return client.HGETALL(keys.component(data.component), function(error, data) {
      if (error) {
        return res.json({
          message: "internal error"
        }, 500);
      } else {
        return res.json(data, 200);
      }
    });
  };

}).call(this);
