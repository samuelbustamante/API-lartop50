// Generated by CoffeeScript 1.3.3
(function() {
  var auth, keys, redis;

  keys = require("./keys");

  auth = require("../auth/auth");

  redis = require("../redis/client");

  exports.create = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var errors, system;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("benchmark_date", "Este campo es requerido.").notEmpty();
      req.assert("benchmark_date", "Este campo es una fecha.").isDate();
      req.assert("cores", "Este campo es requerido.").notEmpty();
      req.assert("cores", "Este campo es un entero.").isInt();
      req.assert("gpu_cores", "Este campo es requerido.").notEmpty();
      req.assert("gpu_cores", "Este campo es un entero.").isInt();
      req.assert("rmax", "Este campo es requerido.").notEmpty();
      req.assert("rmax", "Este campo es de tipo decimal.").isDecimal();
      req.assert("rpeak", "Este campo es requerido.").notEmpty();
      req.assert("rpeak", "Este campo es de tipo decimal.").isDecimal();
      req.assert("nmax", "Este campo es requerido.").notEmpty();
      req.assert("nmax", "este campo es de tipo decimal.").isDecimal();
      req.assert("nhalf", "Este campo es requerido.").notEmpty();
      req.assert("nhalf", "Este campo es de tipo decimal.").isDecimal();
      req.assert("compiler_name", "Este campo es requerido.").notEmpty();
      req.assert("compiler_options", "Este campo es requerido.").notEmpty();
      req.assert("math_library", "Este campo es requerido.").notEmpty();
      req.assert("mpi_library", "Este campo es requerido.").notEmpty();
      req.assert("hpl_input", "Este campo es requerido.").notEmpty();
      req.assert("hpl_output", "Este campo es requerido.").notEmpty();
      req.assert("system", "Este campo es requerido.").notEmpty();
      req.assert("system", "Este campo es de tipo entero.").isInt();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid parameters",
          errors: errors
        }, 400);
        return;
      }
      system = req.body.system;
      return redis.client.EXISTS(keys.system_linpack(system), function(error, exist) {
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        if (exist) {
          res.json({
            message: "linpack already been created"
          }, 403);
          return;
        }
        return redis.client.INCR(keys.linpack_key, function(error, id) {
          var data;
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          req.sanitize("compiler_name").xss();
          req.sanitize("compiler_name").entityEncode();
          req.sanitize("compiler_options").xss();
          req.sanitize("compiler_options").entityEncode();
          req.sanitize("math_library").xss();
          req.sanitize("math_library").entityEncode();
          req.sanitize("mpi_library").xss();
          req.sanitize("mpi_library").entityEncode();
          req.sanitize("hpl_input").xss();
          req.sanitize("hpl_input").entityEncode();
          req.sanitize("hpl_output").xss();
          req.sanitize("hpl_output").entityEncode();
          data = {
            benchmark_date: req.body.benchmark_date,
            cores: req.body.cores,
            gpu_cores: req.body.gpu_cores,
            rmax: req.body.rmax,
            rpeak: req.body.rpeak,
            nmax: req.body.nmax,
            nhalf: req.body.nhalf,
            compiler_name: req.body.compiler_name,
            compiler_options: req.body.compiler_options,
            math_library: req.body.math_library,
            mpi_library: req.body.mpi_library,
            hpl_input: req.body.hpl_input,
            hpl_output: req.body.hpl_output
          };
          return redis.client.HMSET(keys.linpack_description(id), data, function(error) {
            if (error) {
              res.json({
                message: "internal error"
              }, 500);
              return;
            }
            return redis.client.SET(keys.system_linpack(system), id, function(error) {
              if (error) {
                return res.json({
                  message: "internal error"
                }, 500);
              } else {
                return res.json({
                  message: "linpack created successful",
                  data: data
                }, 200);
              }
            });
          });
        });
      });
    });
  };

  exports.show = function(req, res) {
    var errors, linpack;
    req.assert("linpack").isInt();
    errors = req.validationErrors();
    if (errors) {
      res.json({
        message: "invalid parameters",
        errors: errors
      }, 400);
      return;
    }
    linpack = req.params.linpack;
    return redis.client.HGETALL(keys.linpack_description(linpack), function(error, data) {
      if (error) {
        res.json({
          message: "internal error"
        }, 500);
      }
      if (!data) {
        return res.json({
          message: "linpack not found"
        }, 404);
      } else {
        return res.json(data, 200);
      }
    });
  };

}).call(this);
