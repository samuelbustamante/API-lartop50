// Generated by CoffeeScript 1.3.3
(function() {
  var auth, keys, redis;

  keys = require("./keys");

  auth = require("../auth/auth");

  redis = require("../redis/client");

  exports.create = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var errors;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("name").notEmpty();
      req.assert("acronym").notEmpty();
      req.assert("segment").notEmpty();
      req.assert("country").notEmpty();
      req.assert("city").notEmpty();
      req.assert("url").isUrl();
      req.assert("description").notEmpty();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid parameters",
          errors: errors
        }, 400);
        return;
      }
      req.sanitize("description").xss();
      return redis.client.INCR(keys.center_key(), function(error, id) {
        var data;
        data = {
          id: id,
          name: req.body.name,
          acronym: req.body.acronym,
          segment: req.body.segment,
          country: req.body.country,
          city: req.body.city,
          url: req.body.url,
          description: req.body.description
        };
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        return redis.client.HMSET(keys.center_description(id), data, function(error) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          return redis.client.SADD(keys.user_centers(user), id, function(error) {
            if (error) {
              return res.json({
                message: "internal error"
              }, 500);
            } else {
              return res.json({
                message: "center created successful",
                data: data
              }, 200);
            }
          });
        });
      });
    });
  };

  exports.show = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var center, errors;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("center").isInt();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid id"
        }, 400);
        return;
      }
      center = req.params.center;
      return redis.client.SISMEMBER(keys.user_centers(user), center, function(error, member) {
        if (!member) {
          res.json({
            message: "center not found"
          }, 404);
          return;
        }
        return redis.client.HGETALL(keys.center_description(center), function(error, description) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          if (!description) {
            res.json({
              message: "center not found"
            }, 404);
            return;
            return redis.client.SMEMBERS(keys.center_systems(center), function(error, systems) {
              var cmds, system, _i, _len;
              cmds = [];
              for (_i = 0, _len = systems.length; _i < _len; _i++) {
                system = systems[_i];
                cmds.push(['HGETALL', keys.system_description(system)]);
              }
              return redis.client.multi(cmds).exec(function(error, replies) {
                var data;
                if (error) {
                  return res.json({
                    message: "internal error"
                  }, 500);
                } else {
                  data = {
                    description: description,
                    systems: systems
                  };
                  return res.json({
                    message: "successfull",
                    data: data
                  }, 200);
                }
              });
            });
          }
        });
      });
    });
  };

}).call(this);
