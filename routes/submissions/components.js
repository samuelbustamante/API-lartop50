// Generated by CoffeeScript 1.3.3
(function() {
  var auth, keys, redis;

  keys = require("./keys");

  auth = require("../auth/auth");

  redis = require("../redis/client");

  exports.create = function(req, res) {
    return auth.is_authenticated(req, function(user) {
      var data, errors, system;
      if (!user) {
        res.json({
          message: "not authenticated"
        }, 401);
        return;
      }
      req.assert("system", "Este campo es requerido.").notEmpty();
      req.assert("system", "Este campo es de tipo entero.").isInt();
      req.assert("name", "Este campo es requerido.").notEmpty();
      req.assert("model", "Este campo es requerido.").notEmpty();
      req.assert("vendor", "Este campo es requerido.").notEmpty();
      req.assert("nodes", "Este campo es requerido.").notEmpty();
      req.assert("nodes", "Este campo es de tipo entero.").isInt();
      req.assert("memory_node", "Este campo es requerido.").notEmpty();
      req.assert("memory_node", "Este campo es de tipo entero.").isInt();
      req.assert("processor_name", "Este campo es requerido.").notEmpty();
      req.assert("processor_model", "Este campo es requerido.").notEmpty();
      req.assert("processor_socket", "Este campo es requerido.").notEmpty();
      req.assert("processor_socket", "Este campo es de tipo entero.").isInt();
      req.assert("processor_cores", "Este campo es requerido.").notEmpty();
      req.assert("processor_cores", "Este campo es de tipo entero.").isInt();
      req.assert("processor_speed", "Este campo es requerido.").notEmpty();
      req.assert("processor_speed", "Este campo es de tipo decimal.").isDecimal();
      req.assert("accelerator_name", "Este campo es requerido.").notEmpty();
      req.assert("accelerator_model", "Este campo es requerido.").notEmpty();
      req.assert("accelerator_number", "Este campo es requerido.").notEmpty();
      req.assert("accelerator_number", "Este campo es de tipo entero.").isInt();
      req.assert("accelerator_cores", "Este campo es requerido.").notEmpty();
      req.assert("accelerator_cores", "Este campo es de tipo entero.").isInt();
      req.assert("accelerator_speed", "Este campo es requerido.").notEmpty();
      req.assert("accelerator_speed", "Este campo es de tipo decimal.").isDecimal();
      req.assert("peak_power", "Este campo es requerido.").notEmpty();
      req.assert("peak_power", "Este campo es de tipo decimal.").isDecimal();
      req.assert("measured_power", "Este campo es requerido.").notEmpty();
      req.assert("measured_power", "Este campo es de tipo decimal.").isDecimal();
      req.assert("interconection", "Este campo es requerido.").notEmpty();
      req.assert("operating_system", "Este campo es requerido.").notEmpty();
      errors = req.validationErrors();
      if (errors) {
        res.json({
          message: "invalid parameters",
          errors: errors
        }, 400);
        return;
      }
      req.sanitize("name").xss();
      req.sanitize("name").entityEncode();
      req.sanitize("model").xss();
      req.sanitize("model").entityEncode();
      req.sanitize("vendor").xss();
      req.sanitize("vendor").entityEncode();
      req.sanitize("processor_name").xss();
      req.sanitize("processor_name").entityEncode();
      req.sanitize("processor_model").xss();
      req.sanitize("processor_model").entityEncode();
      req.sanitize("accelerator_name").xss();
      req.sanitize("accelerator_name").entityEncode();
      req.sanitize("accelerator_model").xss();
      req.sanitize("accelerator_model").entityEncode();
      req.sanitize("interconection").xss();
      req.sanitize("interconection").entityEncode();
      req.sanitize("operating_system").xss();
      req.sanitize("operating_system").entityEncode();
      system = req.body.system;
      data = {
        name: req.body.name,
        model: req.body.model,
        vendor: req.body.vendor,
        nodes: req.body.nodes,
        memory_node: req.body.memory_node,
        processor_name: req.body.processor_name,
        processor_model: req.body.processor_model,
        processor_socket: req.body.processor_socket,
        processor_cores: req.body.processor_cores,
        processor_speed: req.body.processor_speed,
        accelerator_name: req.body.accelerator_name,
        accelerator_model: req.body.accelerator_model,
        accelerator_number: req.body.accelerator_number,
        accelerator_cores: req.body.accelerator_cores,
        accelerator_speed: req.body.accelerator_speed,
        interconection: req.body.interconection,
        operating_system: req.body.operating_system
      };
      return redis.client.INCR(keys.component_key, function(error, id) {
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        return redis.client.HMSET(keys.component_description(id), data, function(error) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          return redis.client.SADD(keys.system_components(system), id, function(error) {
            if (error) {
              return res.json({
                message: "internal error"
              }, 500);
            } else {
              return res.json({
                message: "component created successful",
                data: data
              }, 200);
            }
          });
        });
      });
    });
  };

  exports.show = function(req, res) {
    var component, errors;
    req.assert("component").isInt();
    errors = req.validationErrors();
    if (errors) {
      res.json({
        message: "invalid parameters",
        errors: errors
      }, 400);
      return;
    }
    component = req.params.component;
    return redis.client.HGETALL(keys.component_description(component), function(error, data) {
      if (error) {
        res.json({
          message: "internal error"
        }, 500);
      }
      if (!data) {
        return res.json({
          message: "component not found"
        }, 404);
      } else {
        return res.json(data, 200);
      }
    });
  };

}).call(this);
