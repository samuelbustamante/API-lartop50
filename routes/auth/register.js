// Generated by CoffeeScript 1.3.3
(function() {
  var PRIVATE_KEY, PUBLIC_KEY, Recaptcha, client, keys, md5, redis, server_email;

  md5 = require("MD5");

  keys = require("./keys");

  redis = require("redis");

  server_email = require("./email");

  Recaptcha = require('recaptcha').Recaptcha;

  PUBLIC_KEY = '';

  PRIVATE_KEY = '';

  client = redis.createClient();

  exports.create = function(req, res) {
    var data_recaptcha, email, errors, password, profile, recaptcha;
    req.assert("name").notEmpty();
    req.assert("email").isEmail();
    req.assert("password").notEmpty();
    req.assert("organization").notEmpty();
    errors = req.validationErrors();
    if (errors) {
      res.json({
        message: "invalid parameters",
        errors: errors
      }, 400);
      return;
    }
    email = req.body.email;
    password = req.body.password;
    profile = {
      name: req.body.name,
      organization: req.body.organization
    };
    data_recaptcha = {
      remoteip: req.connection.remoteAddress,
      challenge: req.body.recaptcha_challenge_field,
      response: req.body.recaptcha_response_field
    };
    recaptcha = new Recaptcha(PUBLIC_KEY, PRIVATE_KEY, data_recaptcha);
    recaptcha.verify(function(success, error_code) {
      if (!success) {
        return res.json({
          message: "invalid recapcha",
          code: error_code
        }, 400);
      }
    });
    return client.GET(keys.user(email), function(error, uid) {
      if (uid) {
        res.json({
          message: "email is already in use"
        }, 410);
        return;
      }
      return client.INCR(keys.key(), function(error, uid) {
        if (error) {
          res.json({
            message: "internal error"
          }, 500);
          return;
        }
        return client.SET(keys.user(email), uid, function(error) {
          if (error) {
            res.json({
              message: "internal error"
            }, 500);
            return;
          }
          return client.SET(keys.password(uid), md5(password), function(error) {
            if (error) {
              res.json({
                message: "internal error"
              }, 500);
              return;
            }
            return client.HMSET(keys.profile(uid), profile, function(error) {
              if (error) {
                res.json({
                  message: "internal error"
                }, 500);
                return;
              }
              return client.SET(keys.active(uid), false, function(error) {
                var key;
                if (error) {
                  res.json({
                    message: "internal error"
                  }, 500);
                  return;
                }
                key = md5(Date() + email);
                return client.SET(keys.activate(key), uid, function(error) {
                  if (error) {
                    res.json({
                      message: "internal error"
                    }, 500);
                  } else {
                    res.json({
                      message: "successful registration"
                    }, 200);
                  }
                  return server_email.send_activate_key(email, key, function(error) {
                    return console.log(key);
                  });
                });
              });
            });
          });
        });
      });
    });
  };

}).call(this);
